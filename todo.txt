registers are limited to 10 bits=> 2^10 highes number => higest number of cod/data lines
----------main-------------
get the files as phrases 
special initialization (if needed)
pre run-> opening macros
first pass
second pass
* genaraiting outputs
* error handling

--------functions----------
get files as phrases:
    will get the cmd input
    check if the names corespond to files(.as) in the directory
    read the files into list(?)
    return the phrases extracted 

preassembler/opening macros: 1:43 in the lesson 
    find all macro:
        (remove the intiation)
    check if legit:!!! we can assume it is
        if there is an error we print a massage and stop the program
    implement into the code
    save the new file with the macros open (.am)
    
first pass:
    

second pass:

create end of run files: (.ob-computer language(abba...), .ext- extern address, .ent-entry address)
    if no entry/extern then no need to create the file
    at the start of .ob need to print IC and DC
--------
read phrases:

recognize the phrase as one of four:
    optional label
    define: macro?, empty, comment, instruction, guideline(start with .)

is label valid:

is nuber valid?
is string valid?

read operand:

encode instruction:

encode decimal to base 4:

define stuff:

--------structs---------
cell:
    10 bit

instruction: (הוראה) 1 to 5 cells, one command and up to tow operand tow cells wach
    first cell (command):
        10 bit filed:
            0-1: sorting Method E,R,A 
            2-3: second(destination) operand destination
            4-5: first(source) operand destination
            6-9: command cod number (0 to 15)
    operand:
        0-1: sorting Method E,R,A (if defined in this file then R if defined in other file then E)
        2-9: value/address

----------other-------------
registers: 
    10 bit each
    r0 to r7
    PC - (program counter) indexing the next commad (in the memory)
    PSW -(program status word)

memory:
    256 cells(word) 10 bit per word,


instruction memory -> IC program counter

data memory -> DC data counter
    simbols table

error table?


how to read a file:
go line by line 
give it a number and store it (list? file? other)




main()
    files = get_files()
    am_files = pre_assembly()
    first_run_files = first_run(am_files)


--------------------pre_assembly
pre_assembly(files):
    for(file in files):
        am_files += pre_assembly_file(file)

    return am_files

pre_assembly_file(file):
    in_macro = false
    list_of_macro = null
    macro_head = null 

    while(line = line_in_file(file,location)):
        first_filed = get_first_filed(line)
        if (first_filed == "macro")
            if(errors_list = check_macro_start(line,list_of_macro))
                print(errors_list)
                break
            in_macro = true
            macro_head = create_new_macro_linked_list()
            add_to_list_of_macro(list_of_macro,macro_head)
        else if (first_filed == "macro_end")
            if(errors_list = check_macro_end(line))
                print(errors_list)
                break
            in_macro = false
            macro_head = null
        else if (in_macro == true)
            add_line_to_macro(macro_head)
        else if (first_filed in list_of_macro):
            copy_macro_to_new_file(new_file, *macro)
        else 
            copy_line_to_file(new_file,line)
        location++

    save_new_file(file_name, ending)
    return new_file
------------------

---------------------first_run
first_run(am_files):
    for (file in am_files)
        first_run_file(file)


first_run_file(file):
    












