registers are limited to 10 bits=> 2^10 highes number => higest number of cod/data lines
----------main-------------

first pass
second pass
* genaraiting outputs
* error handling

--------functions----------
print_error(error_string):
    static_error_flage = true
    print(error_string)



get_files(file): r working
    will get the cmd input
    check if the names corespond to files(.as) in the directory
    read the files into list(all the files) of list(all the lines) of list(all the the words)
        first line in file is the name of the file
    ERROR handling dont stop the project
    return the phrases extracted 

get_line_in_file(file,location):
    will get us the line numberd @location in the file 
    return a list of the word in the line
    or 0/none if its the end of the file
    
add_line_to_file(file, line):\\???
    
save_file(file, file_name, ending): 
    save a file(list of lines of list of words) by name and ending(am/ob)


pre_assembly(files):
    get a list of list of list 
    return a list of am files



handel_macro_start(line, list_of_macro,macro_head):
    will check for errors(alredy exist in list_of_macro, if not defined correctly ...)
    if correct will crreate new macro in macro_head add it to the list and return null
        macro_head = create_new_macro_linked_list()
        add_to_list_of_macro(list_of_macro,macro_head)

    else return an error (string) 

create_new_macro_linked_list():
    will create a new linked list and return the head pointer

add_to_list_of_macro(list_of_macro,macro_head):
    add a new linked list starting at @macro_head to
    the linked_list @list_of_macro 

add_line_to_macro(macro_head,line):
    add @line to the linked_list starting at @macro_head

check_macro_end(line):
    get the line containig macro_end and check its leagal
    if yes return 0 otherwise return an apropriait error

copy_macro_to_file(file, macro_name):
    copy the linked_list macro named macro_name to file line by line
    use add_line_to_file(new_file, line)

is_lable(word):
    get a string
    return true if it can be a lable

first_run(am_files):
    get a list of am files
    return a list of first_run_output_list tipe of stract

first_run_file(file):
    get an am file
    return a first_run_output struct

error_in_first_run(first_run_output_list):
    get the first_run_output_list 
    return true if there is an error in it (so we stop the program)

is_symbole(first_filed):
    get first_filed the first part of a line
    return true if its a lable

is_guidline(word):
    get a word and 
    return true if its a guidline הנחייה

is_extern_or_entry(word):
    get a word
    return true if its extern or entry

is_extern(word):
    get a word
    return true if its extern

is_symbole_in_table(word):
    get word = a symbole (first_filed) 
    return true if its alredy in the symbole_table

add_to_symbole_table(symbole, leagale, line(int), trait):
    get str symbole, bool leagal, int line(DC/IC), str trait(data/code)

identify_data_type(word):
    get a word (suposed to be a command)
    return the function to call (i.e. move() or mat()), if invalid word return 0

add_to_instruction_table(IC, counter_L, code):
    get int IC, counter_L(number of new lines), str code and add them to the table

"func"(line, current_filed):
    get line = the a list of the words in the line, current_filed = the index where the function name is in the list
    return a string of the machin code, an int for the number of line of code 1 to 5





second_run(first_run_output_list):
    get the first_run_output_list 

create end of run files: (.ob-computer language(abba...), .ext- extern address, .ent-entry address)
    if no entry/extern then no need to create the file
    at the start of .ob need to print IC and DC

--------structs---------
cell:
    10 bit

instruction: (הוראה) 1 to 5 cells, one command and up to tow operand two cells each
    first cell (command):
        10 bit filed:
            0-1: sorting Method E,R,A 
            2-3: second(destination) operand destination
            4-5: first(source) operand destination
            6-9: command cod number (0 to 15)
    operand:
        0-1: sorting Method E,R,A (if defined in this file then R if defined in other file then E)
        2-9: value/address

lines_container: // files, macro 
    name: 
    lines: list of list of list //(realoc)

macro_linked_lis: linked list containing list of list (lines of words)

first_run_output:
    file_name: str
    ERROR: '' or str
    ICF: 1024> int >0
    DCF: 1024> int >0
    table_instructions: linked_list \\ IC, counter_L, code
    table_datas: 
    symbole_table: linked_list   \\ symbole, leagale, line(int), trait


--------------------main
main()
    char*** files = get_files()
    char*** am_files = pre_assembly(files)
    first_run_output_list = first_run(am_files)
    if (!error_in_first_run(first_run_output_list)):
        second_run(first_run_output_list)    
        write_end_of_run_files()
    return
    


--------------------pre_assembly
pre_assembly(char*** files):
    
    for(file in files): \\ file = list of list (lines of words)
        am_files += pre_assembly_file(file)

    return am_files \\ list of files >list of lines> list of words

pre_assembly_file(char** file):
    in_macro = false
    struct list_of_macro = null
    macro_head = null 
    new_file = "" \\ list of list

    for (line in file):
        first_filed = line[0]
        if (first_filed == "macro")
            if(!errors = handel_macro_start(line, list_of_macro, *macro_head))
                if (in_macro == true):
                    print_error(error: was promised to not have two macros imbeded)
                in_macro = true
            else:
                print_error(errors)
        else if (first_filed == "macro_end")
            if(errors = check_macro_end(line))
                print_error(errors_list)
                break
            in_macro = false
            macro_head = null
        else if (in_macro == true)
            add_line_to_macro(macro_head,line)
        else if (is_lable(first_filed) and line[1]== "macro"):
            print_error(ERROR cant be lable at start of macro)
        else if (first_filed in list_of_macro):
            copy_macro_to_file(new_file, first_filed)   \\its not a file yet its a list of list
        else 
            add_line_to_file(new_file,line) \\its not a file yet its a list of list
        location++

    save_file(new_file, file_name, ending)
    return new_file
------------------

---------------------first_run
first_run(am_files):
    error_flag = 0
    struct first_run_output =[]
    for (file in files):
        ERROR,ICF,DCF,table_instructions, table_datas, symbole_table = first_run_file(file)
        first_run_output.append(ERROR,ICF,DCF,table_instructions, table_datas, symbole_table)
        update_symbole_table(symbole_table, ICF)
        if (ERROR):
            error_flag = 1
    return first_run_output


first_run_file(file):
    int IC , DC = 0 \\ instruction counter data counter
    table_instructions = linked_list \\ IC, counter_L, code
    table_datas= 
    symbole_table=linked_list   \\ symbole, leagale, line(int), trait
    symbole_flag= 0
    current_filed = 0

    linked_list ERROR = ''

    line_conter = 0
    while(line = get_line_in_file(file,line_conter))
        current_filed = 0
        symbole_flag = 0 
        first_filed = line[current_filed]
        if(is_symbole(first_filed)):
            symbole_flag = 1
            current_filed = 1
        if (is_guidline(line[current_filed])):
            if(symbole_flag):   \\ can be function\macro 1
                if (is_symbole_in_table(line[0])):
                    ERROR += ERROR CANT HAVE DOUBLE SYMBOLES
                    add_to_symbole_table(line[0], false, DC, data)  \\ not neccery
                else:
                    add_to_symbole_table(line[0], true, DC, data)
            
            func = identify_data_type(line[current_filed])
            if (func == 0):
                ERROR += ERROR NON EXICTING FUNCTION
            code,counter = func(line, current_filed)    \\
            table_data += code
            DC += counter
        else if (is_extern_or_entry(line[current_filed])):
            if (is_extern(line[current_filed]))
                (check for errors)
                add_to_symbole_table(line[current_filed+1], true, 0, external)
            else:
                add entries to table_instructions
        
        else:   \\ instruction
            if(symbole_flag):   \\ can be function\macro 1
                if (is_symbole_in_table(line[0])):
                    ERROR += ERROR CANT HAVE DOUBLE SYMBOLES
                    add_to_symbole_table(line[0], false, IC, code)
                else:
                    add_to_symbole_table(line[0], true, IC, code)
            func = identify_data_type(line[current_filed])
            if (func == 0):
                ERROR += ERROR NON EXICTING FUNCTION
            code,counter_L = func(line, current_filed)    \\
            add_to_instruction_table(IC, counter_L, code)
            IC += counter_L

        line_conter++

    if ( not ERROR):

        return (file_name,ERROR,ICF,DCF,table_instructions, table_datas, symbole_table)

---------------------second_run
second_run(first_run_output_list):
    for (first_run_output in first_run_output_list):
        second_run_file(first_run_output, first_run_output_list)


second_run_file(first_run_output, first_run_output_list)
    char * new_ob_file = ''
    while(line = get_line_in_file(file,line_conter)):
        current_filed = 0 
        first_filed = line[current_filed]
        if(is_symbole(first_filed)):
            current_filed++
        if (!is_guidline(line[current_filed]) and !is_extern(line[current_filed])):
            if(is_entry(line[current_filed])):
                add_to_symbole_entry(line[current_filed+1], first_run_output->symbole_table)
            else:
                line = symbole_to_code(line[current_filed],symbole_table)
                





move(line, current_filed): return [code(str), counter]
string(line, current_filed): return [code(str), counter]
...
f0:(file_name,ERROR,ICF,DCF,table_instructions, table_datas, symbole_table={MAIN[code, entry]})
entry MAIN

MAIN: move m[r1][r2],m[r1][r2]  
.mat m2 ....
MAIN2: .data m1
MAIN2:   01201010
         1010110
         1010100
macro m1
hgj
end_macro

SOME_LABLE: macro m1
hgj
end_macro

je 
JMP MAIN
mat m  

f1: (file_name,ERROR,ICF,DCF,table_instructions, table_datas, symbole_table={MAIN[extern]})

external MAIN

jmp MAIN
l1: move r3, r4 ic=0

f2: (file_name,ERROR,ICF,DCF,table_instructions, table_datas, symbole_table={MAIN[data]})
MAIN: mat ....
l2: ghj ic = 0
.mat 0, l2 ,ext  
sag




external m1
01010101010
01010101010
m1                        <----      0101010110-10
str
01010101010
01010101010
.entry main
01010101010
01010101010
m11
str2
01010101010
01010101010
.entry main2







----------other-------------
registers: 
    10 bit each
    r0 to r7
    PC - (program counter) indexing the next commad (in the memory)
    PSW -(program status word)

memory:?????????????
    256 cells(word) 10 bit per word,


instruction memory -> IC program counter

data memory -> DC data counter
    simbols table

error table?


how to read a file:
go line by line 
give it a number and store it (list? file? other)